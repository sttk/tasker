'use strict';

var Tasker = require('tasker/src/tasker.js');
var Task = require('tasker/src/task.js');
var Lineno = require('tasker/src/lineno.js');
var path = require('path');

testsuite('Test of Tasker', function() {
  this.testcase('#Constructor', {
    run:function() {
      var tasker = new Tasker();
      this.equal(Object.keys(tasker._tasks).length, 0);
      this.equal(Object.keys(tasker.toplevels).length, 0);
      this.equal(Object.keys(tasker._needed).length, 0);
      this.equal(Object.keys(tasker._loaded).length, 0);
      this.equal(tasker._willLoad.size, 0);
      this.equal(tasker._lineno.filename, path.resolve(process.argv[1]));
      this.isNull(tasker._namespace);
      this.isNull(tasker.target);
    }
  });
  this.testcase('#clear', {
    run:function() {
      var tasker = new Tasker();
      var task0 = new Task('task0', []);
      tasker._tasks[task0.name] = task0;
      tasker.toplevels[task0.name] = task0;
      tasker._needed[task0.name] = task0;
      tasker._loaded[__filename] = true;
      tasker._willLoad.set('kkk', {filename:__filename,namespace:'xxx'});
      tasker._lineno = new Lineno('aaa');
      tasker._namespace = 'bbb';
      tasker.target = 'ccc';

      this.equal(Object.keys(tasker._tasks).length, 1);
      this.equal(Object.keys(tasker.toplevels).length, 1);
      this.equal(Object.keys(tasker._needed).length, 1);
      this.equal(Object.keys(tasker._loaded).length, 1);
      this.equal(tasker._willLoad.size, 1);
      this.equal(tasker._tasks[task0.name], task0);
      this.equal(tasker.toplevels[task0.name], task0);
      this.equal(tasker._needed[task0.name], task0);
      this.equal(tasker._loaded[__filename], true);
      this.equal(tasker._willLoad.get('kkk').filename, __filename);
      this.equal(tasker._willLoad.get('kkk').namespace, 'xxx');
      this.equal(tasker._lineno.filename, 'aaa');
      this.equal(tasker._namespace, 'bbb');
      this.equal(tasker.target, 'ccc');

      tasker.clear();
      this.equal(Object.keys(tasker._tasks).length, 0);
      this.equal(Object.keys(tasker.toplevels).length, 0);
      this.equal(Object.keys(tasker._needed).length, 0);
      this.equal(Object.keys(tasker._loaded).length, 0);
      this.equal(tasker._willLoad.size, 0);
      this.equal(tasker._lineno.filename, path.resolve(process.argv[1]));
      this.isNull(tasker._namespace);
      this.isNull(tasker.target);
    }
  });
  this.testcase('#get', {
    run:function() {
      var tasker = new Tasker();
      this.isNull(tasker.get('task0'));
      this.isNull(tasker.get('task1'));
      this.isNull(tasker.get('task2'));
      this.isNull(tasker.get('task3'));
      this.isNull(tasker.get('task4'));
      this.isNull(tasker.get('task5'));

      var task0 = new Task('task0', []);
      var task1 = new Task('task1', []);
      var task2 = new Task('task2', []);
      var task3 = new Task('task3', []);
      var task4 = new Task('task4', []);
      var task5 = new Task('task5', []);
      tasker._tasks[task0.name] = task0;
      tasker._tasks[task1.name] = task1;
      tasker.toplevels[task2.name] = task2;
      tasker.toplevels[task3.name] = task3;
      tasker._needed[task4.name] = task4;
      tasker._needed[task5.name] = task5;

      this.isNull(tasker.get('task0'));
      this.isNull(tasker.get('task1'));
      this.equal(tasker.get('task2'), task2);
      this.equal(tasker.get('task3'), task3);
      this.isNull(tasker.get('task4'));
      this.isNull(tasker.get('task5'));
    }
  });
  this.testcase('#entry', function() {
    this.scene('entry a task having no child', {
      run:function() {
        var filename = path.resolve(process.argv[1]);
        var tasker = new Tasker();
        var task0 = tasker.entry('task0', []);
        this.equal(Object.keys(tasker._tasks).length, 1);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0');
        this.equal(task0._childs.length, 0);
        this.equal(task0.filename, filename);
        this.equal(task0.lineno, 97);
        this.equal(task0._defined[0], 1);
      }
    });
    this.scene('entry a task having a child', {
      run:function() {
        var filename = path.resolve(process.argv[1]);
        var tasker = new Tasker();
        var task0 = tasker.entry('task0', []);
        var task1 = tasker.entry('task1', ['task0']);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0');
        this.equal(task0._childs.length, 0);
        this.equal(task0.filename, filename);
        this.equal(task0.lineno, 119);
        this.equal(task0._defined[0], 1);
        this.equal(task1.name, 'task1');
        this.equal(task1._childs.length, 1);
        this.equal(task1._childs[0], task0);
        this.equal(task1.filename, filename);
        this.equal(task1.lineno, 120);
        this.equal(task1._defined[0], 1);
      }
    });
    this.scene('forward references', {
      run: function() {
        var filename = require.resolve('tasker/tests/tasker.js');
        var tasker = new Tasker();
        tasker._lineno = new Lineno(filename);
        var task0 = tasker.entry('task0', ['task1']);
        var task1 = tasker._tasks.task1;
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name].name, 'task1');
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker._needed[task1.name], task1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0');
        this.equal(task0._childs.length, 1);
        this.equal(task0._childs[0], task1);
        this.equal(task0.filename, filename);
        this.equal(task0.lineno, 151);
        this.equal(task0._defined[0], 1);
        this.equal(task1.name, 'task1');
        this.equal(task1._childs.length, 0);
        this.equal(task1.filename, filename);
        this.equal(task1.lineno, 0);
        this.equal(task1._defined[0], 0);

        var t = tasker.entry('task1', []);
        this.equal(t, task1);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0');
        this.equal(task0._childs.length, 1);
        this.equal(task0._childs[0], task1);
        this.equal(task0.filename, filename);
        this.equal(task0.lineno, 151);
        this.equal(task0._defined[0], 1);
        this.equal(task1.name, 'task1');
        this.equal(task1._childs.length, 0);
        this.equal(task1.filename, filename);
        this.equal(task1.lineno, 177);
        this.equal(task1._defined[0], 1);
      }
    });
    this.scene('entry tasks with a same name', {
      run: function() {
        var filename = require.resolve('tasker/tests/tasker.js');
        var tasker = new Tasker();
        tasker._lineno = new Lineno(filename);
        var task0 = tasker.entry('task0', []);
        var task1 = tasker.entry('task1', ['task0']);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0');
        this.equal(task0._childs.length, 0);
        this.equal(task0.filename, filename);
        this.equal(task0.lineno, 209);
        this.equal(task0._defined[0], 1);
        this.equal(task1.name, 'task1');
        this.equal(task1._childs.length, 1);
        this.equal(task1._childs[0], task0);
        this.equal(task1.filename, filename);
        this.equal(task1.lineno, 210);
        this.equal(task1._defined[0], 1);

        var task00 = tasker.entry('task0', []);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task00);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0');
        this.equal(task0._childs.length, 0);
        this.equal(task0.filename, filename);
        this.equal(task0.lineno, 209);
        this.equal(task0._defined[0], 2);
        this.equal(task1.name, 'task1');
        this.equal(task1._childs.length, 1);
        this.equal(task1._childs[0], task0);
        this.equal(task1.filename, filename);
        this.equal(task1.lineno, 210);
        this.equal(task1._defined[0], 1);
        this.equal(task00.name, 'task0');
        this.equal(task00._childs.length, 0);
        this.equal(task00.filename, filename);
        this.equal(task00.lineno, 235);
        this.equal(task00._defined[0], 2);
      }
    });
    this.scene('entry tasks using a target', {
      run: function() {
        var filename = require.resolve('tasker/tests/tasker.js');
        var tasker = new Tasker();
        tasker._lineno = new Lineno(filename);
        tasker.target = 'task0';
        var task0 = tasker.entry('task0', ['task1']);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks.task1.name, 'task1');
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker._needed.task1.name, 'task1');
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task0');

        var task1 = tasker.entry('task1', ['task2','task4']);
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 2);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker._tasks.task2.name, 'task2');
        this.equal(tasker._tasks.task4.name, 'task4');
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker._needed.task2.name, 'task2');
        this.equal(tasker._needed.task4.name, 'task4');
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task0');

        var task2 = tasker.entry('task2', []);
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker._tasks[task2.name], task2);
        this.equal(tasker._tasks.task4.name, 'task4');
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker.toplevels[task2.name], task2);
        this.equal(tasker._needed.task4.name, 'task4');
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task0');

        var task3 = tasker.entry('task3', []);
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 4);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker._tasks[task2.name], task2);
        this.equal(tasker._tasks[task3.name], task3);
        this.equal(tasker._tasks.task4.name, 'task4');
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker.toplevels[task2.name], task2);
        this.equal(tasker.toplevels[task3.name], task3);
        this.equal(tasker._needed.task4.name, 'task4');
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task0');

        var task4 = tasker.entry('task4', []);
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 5);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker._tasks[task2.name], task2);
        this.equal(tasker._tasks[task3.name], task3);
        this.equal(tasker._tasks[task4.name], task4);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker.toplevels[task2.name], task2);
        this.equal(tasker.toplevels[task3.name], task3);
        this.equal(tasker.toplevels[task4.name], task4);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task0');

        var task5 = tasker.entry('task5', []);
        this.equal(task5.name, '');
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 5);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks[task0.name], task0);
        this.equal(tasker._tasks[task1.name], task1);
        this.equal(tasker._tasks[task2.name], task2);
        this.equal(tasker._tasks[task3.name], task3);
        this.equal(tasker._tasks[task4.name], task4);
        this.equal(tasker.toplevels[task0.name], task0);
        this.equal(tasker.toplevels[task1.name], task1);
        this.equal(tasker.toplevels[task2.name], task2);
        this.equal(tasker.toplevels[task3.name], task3);
        this.equal(tasker.toplevels[task4.name], task4);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task0');
      }
    });
    this.scene('entry tasks with a namespace', {
      run: function() {
        var filename = require.resolve('tasker/tests/tasker.js');
        var tasker = new Tasker();
        tasker._lineno = new Lineno(filename);
        tasker._namespace = 'XXX';

        var task0 = tasker.entry('task0', ['task1']);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@XXX'], task0);
        this.equal(tasker._tasks['task1@XXX'].name, 'task1@XXX');
        this.equal(tasker.toplevels['task0@XXX'], task0);
        this.equal(tasker._needed['task1@XXX'].name, 'task1@XXX');
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'XXX');
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0@XXX');
        this.isNull(tasker.get('task0'));
        this.equal(tasker.get('task0@XXX'), task0);

        var task1 = tasker.entry('task1', []);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@XXX'], task0);
        this.equal(tasker._tasks['task1@XXX'], task1);
        this.equal(tasker.toplevels['task0@XXX'], task0);
        this.equal(tasker.toplevels['task1@XXX'], task1);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'XXX');
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0@XXX');
        this.equal(task1.name, 'task1@XXX');
        this.isNull(tasker.get('task0'));
        this.isNull(tasker.get('task1'));
        this.equal(tasker.get('task0@XXX'), task0);
        this.equal(tasker.get('task1@XXX'), task1);

        var task00 = tasker.entry('task0', []);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@XXX'], task00);
        this.equal(tasker._tasks['task1@XXX'], task1);
        this.equal(tasker.toplevels['task0@XXX'], task0);
        this.equal(tasker.toplevels['task1@XXX'], task1);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'XXX');
        this.isNull(tasker.target);
        this.equal(task0.name, 'task0@XXX');
        this.equal(task1.name, 'task1@XXX');
        this.isNull(tasker.get('task0'));
        this.isNull(tasker.get('task1'));
        this.equal(tasker.get('task0@XXX'), task0);
        this.equal(tasker.get('task1@XXX'), task1);
      }
    });
    this.scene('entry tasks with a namespace using a target', {
      run: function() {
        var filename = require.resolve('tasker/tests/tasker.js');
        var tasker = new Tasker();
        tasker._lineno = new Lineno(filename);
        tasker.target = 'task0@AAA';
        tasker._namespace = 'AAA';

        var task0 = tasker.entry('task0', ['task1']);
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@AAA'], task0);
        this.equal(tasker._tasks['task1@AAA'].name, 'task1@AAA');
        this.equal(tasker.toplevels['task0@AAA'], task0);
        this.equal(tasker._needed['task1@AAA'].name, 'task1@AAA');
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'AAA');
        this.equal(tasker.target, 'task0@AAA');
        this.equal(tasker.get('task0@AAA'), task0);

        var task1 = tasker.entry('task1', ['task2','task4']);
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 2);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@AAA'], task0);
        this.equal(tasker._tasks['task1@AAA'], task1);
        this.equal(tasker._tasks['task2@AAA'].name, 'task2@AAA');
        this.equal(tasker._tasks['task4@AAA'].name, 'task4@AAA');
        this.equal(tasker.toplevels['task0@AAA'], task0);
        this.equal(tasker.toplevels['task1@AAA'], task1);
        this.equal(tasker._needed['task2@AAA'].name, 'task2@AAA');
        this.equal(tasker._needed['task4@AAA'].name, 'task4@AAA');
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'AAA');
        this.equal(tasker.target, 'task0@AAA');
        this.equal(tasker.get('task0@AAA'), task0);
        this.equal(tasker.get('task1@AAA'), task1);

        var task2 = tasker.entry('task2', []);
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@AAA'], task0);
        this.equal(tasker._tasks['task1@AAA'], task1);
        this.equal(tasker._tasks['task2@AAA'], task2);
        this.equal(tasker._tasks['task4@AAA'].name, 'task4@AAA');
        this.equal(tasker.toplevels['task0@AAA'], task0);
        this.equal(tasker.toplevels['task1@AAA'], task1);
        this.equal(tasker.toplevels['task2@AAA'], task2);
        this.equal(tasker._needed['task4@AAA'].name, 'task4@AAA');
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'AAA');
        this.equal(tasker.target, 'task0@AAA');
        this.equal(tasker.get('task0@AAA'), task0);
        this.equal(tasker.get('task1@AAA'), task1);
        this.equal(tasker.get('task2@AAA'), task2);

        var task3 = tasker.entry('task3', []);
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 4);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@AAA'], task0);
        this.equal(tasker._tasks['task1@AAA'], task1);
        this.equal(tasker._tasks['task2@AAA'], task2);
        this.equal(tasker._tasks['task3@AAA'], task3);
        this.equal(tasker._tasks['task4@AAA'].name, 'task4@AAA');
        this.equal(tasker.toplevels['task0@AAA'], task0);
        this.equal(tasker.toplevels['task1@AAA'], task1);
        this.equal(tasker.toplevels['task2@AAA'], task2);
        this.equal(tasker.toplevels['task3@AAA'], task3);
        this.equal(tasker._needed['task4@AAA'].name, 'task4@AAA');
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'AAA');
        this.equal(tasker.target, 'task0@AAA');
        this.equal(tasker.get('task0@AAA'), task0);
        this.equal(tasker.get('task1@AAA'), task1);
        this.equal(tasker.get('task2@AAA'), task2);
        this.equal(tasker.get('task3@AAA'), task3);

        var task4 = tasker.entry('task4', []);
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 5);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@AAA'], task0);
        this.equal(tasker._tasks['task1@AAA'], task1);
        this.equal(tasker._tasks['task2@AAA'], task2);
        this.equal(tasker._tasks['task3@AAA'], task3);
        this.equal(tasker._tasks['task4@AAA'], task4);
        this.equal(tasker.toplevels['task0@AAA'], task0);
        this.equal(tasker.toplevels['task1@AAA'], task1);
        this.equal(tasker.toplevels['task2@AAA'], task2);
        this.equal(tasker.toplevels['task3@AAA'], task3);
        this.equal(tasker.toplevels['task4@AAA'], task4);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'AAA');
        this.equal(tasker.target, 'task0@AAA');
        this.equal(tasker.get('task0@AAA'), task0);
        this.equal(tasker.get('task1@AAA'), task1);
        this.equal(tasker.get('task2@AAA'), task2);
        this.equal(tasker.get('task3@AAA'), task3);
        this.equal(tasker.get('task4@AAA'), task4);

        var task5 = tasker.entry('task5', []);
        this.equal(task5.name, '');
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 5);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._tasks['task0@AAA'], task0);
        this.equal(tasker._tasks['task1@AAA'], task1);
        this.equal(tasker._tasks['task2@AAA'], task2);
        this.equal(tasker._tasks['task3@AAA'], task3);
        this.equal(tasker._tasks['task4@AAA'], task4);
        this.equal(tasker.toplevels['task0@AAA'], task0);
        this.equal(tasker.toplevels['task1@AAA'], task1);
        this.equal(tasker.toplevels['task2@AAA'], task2);
        this.equal(tasker.toplevels['task3@AAA'], task3);
        this.equal(tasker.toplevels['task4@AAA'], task4);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker._namespace, 'AAA');
        this.equal(tasker.target, 'task0@AAA');
        this.equal(tasker.get('task0@AAA'), task0);
        this.equal(tasker.get('task1@AAA'), task1);
        this.equal(tasker.get('task2@AAA'), task2);
        this.equal(tasker.get('task3@AAA'), task3);
        this.equal(tasker.get('task4@AAA'), task4);
      }
    });
  });
  this.testcase('#load', function() {
    this.scene('load', {
      run: function() {
        var tasker = require('tasker/tests/tasker/a.js');
        var filename = require.resolve('tasker/tests/tasker/a.js');
        tasker._lineno = new Lineno(filename);

        this.equal(Object.keys(tasker._tasks).length, 0);
        this.equal(Object.keys(tasker.toplevels).length, 0);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);

        var task0 = tasker.entry('task-0', ['task-1']);
        var task1 = tasker._tasks['task-1'];
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1'], task1);

        tasker.load('./a0.js');
        var file_a0 = path.resolve('./tests/tasker/a0.js');
        var task2 = tasker._tasks['task-2'];
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker._needed['task-2'], task2);
        this.equal(tasker._loaded[file_a0].filename, file_a0);
        this.isNull(tasker._loaded[file_a0].namespace);

        tasker.entry('task-2', []);
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker._loaded[file_a0].filename, file_a0);
        this.isNull(tasker._loaded[file_a0].namespace);

        tasker.load('./a1.js');
        var file_a1 = path.resolve('./tests/tasker/a1.js');
        var task3 = tasker._tasks['task-3'];
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 4);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 2);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker._tasks['task-3'], task3);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker.toplevels['task-3'], task3);
        this.equal(tasker._loaded[file_a0].filename, file_a0);
        this.equal(tasker._loaded[file_a1].filename, file_a1);
        this.isNull(tasker._loaded[file_a0].namespace);
        this.isNull(tasker._loaded[file_a1].namespace);
      }
    });
    this.scene('load using a target', {
      run: function() {
        var tasker = require('tasker/tests/tasker/b.js');
        var filename = require.resolve('tasker/tests/tasker/b.js');
        tasker._lineno = new Lineno(filename);
        tasker.target = 'task-0';

        this.equal(Object.keys(tasker._tasks).length, 0);
        this.equal(Object.keys(tasker.toplevels).length, 0);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');

        var task0 = tasker.entry('task-0', ['task-1']);
        var task1 = tasker._tasks['task-1'];
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1'], task1);

        tasker.load('./b0.js');
        var file_a0 = path.resolve('./tests/tasker/b0.js');
        var task2 = tasker._tasks['task-2'];
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker._needed['task-2'], task2);
        this.equal(tasker._loaded[file_a0].filename, file_a0);
        this.isNull(tasker._loaded[file_a0].namespace);

        tasker.entry('task-2', []);
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker._loaded[file_a0].filename, file_a0);
        this.isNull(tasker._loaded[file_a0].namespace);

        tasker.load('./b1.js');
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker._loaded[file_a0].filename, file_a0);
        this.isNull(tasker._loaded[file_a0].namespace);
      }
    });
    this.scene('load with namespaces using a target', {
      run: function() {
        var tasker = require('tasker/tests/tasker/d.js');
        var filename = require.resolve('tasker/tests/tasker/d.js');
        tasker._lineno = new Lineno(filename);
        tasker.target = 'task-0';

        this.equal(Object.keys(tasker._tasks).length, 0);
        this.equal(Object.keys(tasker.toplevels).length, 0);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');

        var task0 = tasker.entry('task-0', ['task-1@D1']);
        var task1d1 = tasker._tasks['task-1@D1'];
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1d1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1@D1'], task1d1);

        tasker.load('./d0.js', 'D0');
        var file_d0 = path.resolve('./tests/tasker/d0.js');
        var task1d0 = tasker._tasks['task-1@D0'];
        var task2d0 = tasker._tasks['task-2@D0'];
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1d1);
        this.equal(tasker._tasks['task-1@D0'], task1d0);
        this.equal(tasker._tasks['task-2@D0'], task2d0);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1@D0'], task1d0);
        this.equal(tasker._needed['task-1@D1'], task1d1);
        this.equal(tasker._loaded[file_d0+'@D0'].filename, file_d0);
        this.equal(tasker._loaded[file_d0+'@D0'].namespace, 'D0');

        tasker.load('./d0.js', 'D1');
        var task2d1 = tasker._tasks['task-2@D1'];
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 2);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1d1);
        this.equal(tasker._tasks['task-2@D1'], task2d1);
        this.equal(tasker._tasks['task-1@D0'], task1d0);
        this.equal(tasker._tasks['task-2@D0'], task2d0);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1@D0'], task1d0);
        this.equal(tasker.toplevels['task-1@D1'], task1d1);
        this.equal(tasker._needed['task-2@D1'], task2d1);
        this.equal(tasker._loaded[file_d0+'@D0'].filename, file_d0);
        this.equal(tasker._loaded[file_d0+'@D0'].namespace, 'D0');
        this.equal(tasker._loaded[file_d0+'@D1'].filename, file_d0);
        this.equal(tasker._loaded[file_d0+'@D1'].namespace, 'D1');

        tasker.load('./d1.js', 'D1');
        var file_d1 = path.resolve('./tests/tasker/d1.js');
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 4);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 3);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1d1);
        this.equal(tasker._tasks['task-2@D1'], task2d1);
        this.equal(tasker._tasks['task-1@D0'], task1d0);
        this.equal(tasker._tasks['task-2@D0'], task2d0);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1@D0'], task1d0);
        this.equal(tasker.toplevels['task-1@D1'], task1d1);
        this.equal(tasker.toplevels['task-2@D1'], task2d1);
        this.equal(tasker._loaded[file_d0+'@D0'].filename, file_d0);
        this.equal(tasker._loaded[file_d0+'@D0'].namespace, 'D0');
        this.equal(tasker._loaded[file_d0+'@D1'].filename, file_d0);
        this.equal(tasker._loaded[file_d0+'@D1'].namespace, 'D1');
        this.equal(tasker._loaded[file_d1+'@D1'].filename, file_d1);
        this.equal(tasker._loaded[file_d1+'@D1'].namespace, 'D1');
      }
    });
  });
  this.testcase('#loadLater', function() {
    this.scene('loadLater', {
      run: function() {
        var key;
        var tasker = require('tasker/tests/tasker/aa.js');
        var filename = require.resolve('tasker/tests/tasker/aa.js');
        tasker._lineno = new Lineno(filename);

        this.equal(Object.keys(tasker._tasks).length, 0);
        this.equal(Object.keys(tasker.toplevels).length, 0);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);

        var task0 = tasker.entry('task-0', ['task-1']);
        var task1 = tasker._tasks['task-1'];
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1'], task1);

        tasker.loadLater('./aa0.js');
        var file_aa0 = path.resolve('./tests/tasker/aa0.js');
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1'], task1);
        key = file_aa0;
        this.equal(tasker._willLoad.get(key).filename, file_aa0);
        this.isNull(tasker._willLoad.get(key).namespace);

        var task2 =  tasker.entry('task-2', []);
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker._needed['task-1'], task1);
        key = file_aa0;
        this.equal(tasker._willLoad.get(key).filename, file_aa0);
        this.isNull(tasker._willLoad.get(key).namespace);

        tasker.loadLater('./aa1.js');
        var file_aa1 = path.resolve('./tests/tasker/aa1.js');
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 2);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker._needed['task-1'], task1);
        key = file_aa0;
        this.equal(tasker._willLoad.get(key).filename, file_aa0);
        this.isNull(tasker._willLoad.get(key).namespace);
        key = file_aa1;
        this.equal(tasker._willLoad.get(key).filename, file_aa1);
        this.isNull(tasker._willLoad.get(key).namespace);

        tasker.lateLoad();
        var task3 = tasker._tasks['task-3'];
        this.equal(Object.keys(tasker._tasks).length, 4);
        this.equal(Object.keys(tasker.toplevels).length, 4);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 2);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.isNull(tasker.target);
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker._tasks['task-3'], task3);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker.toplevels['task-3'], task3);
        this.equal(tasker._loaded[file_aa0].filename, file_aa0);
        this.equal(tasker._loaded[file_aa1].filename, file_aa1);
        this.isNull(tasker._loaded[file_aa0].namespace);
        this.isNull(tasker._loaded[file_aa1].namespace);
      }
    });
    this.scene('loadLater using a target', {
      run: function() {
        var key;
        var tasker = require('tasker/tests/tasker/bb.js');
        var filename = require.resolve('tasker/tests/tasker/bb.js');
        tasker._lineno = new Lineno(filename);
        tasker.target = 'task-0';

        this.equal(Object.keys(tasker._tasks).length, 0);
        this.equal(Object.keys(tasker.toplevels).length, 0);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');

        var task0 = tasker.entry('task-0', ['task-1']);
        var task1 = tasker._tasks['task-1'];
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1'], task1);

        tasker.loadLater('./bb0.js');
        var file_bb0 = path.resolve('./tests/tasker/bb0.js');
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1'], task1);
        key = file_bb0;
        this.equal(tasker._willLoad.get(key).filename, file_bb0);
        this.isNull(tasker._willLoad.get(key).namespace);

        tasker.entry('task-2', []);
        var task2 = tasker._tasks['task-2'];
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 1);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-2'], task2);
        key = file_bb0;
        this.equal(tasker._willLoad.get(key).filename, file_bb0);
        this.isNull(tasker._willLoad.get(key).namespace);

        tasker.loadLater('./bb1.js');
        var file_bb1 = path.resolve('./tests/tasker/bb1.js');
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 2);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 2);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-2'], task2);
        key = file_bb0;
        this.equal(tasker._willLoad.get(key).filename, file_bb0);
        this.isNull(tasker._willLoad.get(key).namespace);
        key = file_bb1;
        this.equal(tasker._willLoad.get(key).filename, file_bb1);
        this.isNull(tasker._willLoad.get(key).namespace);

        tasker.lateLoad();
        this.equal(Object.keys(tasker._tasks).length, 3);
        this.equal(Object.keys(tasker.toplevels).length, 3);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 1);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1'], task1);
        this.equal(tasker._tasks['task-2'], task2);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1'], task1);
        this.equal(tasker.toplevels['task-2'], task2);
        this.equal(tasker._loaded[file_bb0].filename, file_bb0);
        this.isNull(tasker._loaded[file_bb0].namespace);
      }
    });
    this.scene('loadLater with namespaces using a target', {
      run: function() {
        var key;
        var tasker = require('tasker/tests/tasker/dd.js');
        var filename = require.resolve('tasker/tests/tasker/dd.js');
        tasker._lineno = new Lineno(filename);
        tasker.target = 'task-0';

        this.equal(Object.keys(tasker._tasks).length, 0);
        this.equal(Object.keys(tasker.toplevels).length, 0);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');

        var task0 = tasker.entry('task-0', ['task-1@D1']);
        var task1dd1 = tasker._tasks['task-1@D1'];
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1dd1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1@D1'], task1dd1);

        tasker.loadLater('./dd0.js', 'D0');
        var file_dd0 = path.resolve('./tests/tasker/dd0.js');
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 1);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1dd1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1@D1'], task1dd1);
        key = file_dd0 + '@D0';
        this.equal(tasker._willLoad.get(key).filename, file_dd0);
        this.equal(tasker._willLoad.get(key).namespace, 'D0');

        tasker.loadLater('./dd0.js', 'D1');
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 2);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1dd1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1@D1'], task1dd1);
        key = file_dd0 + '@D0';
        this.equal(tasker._willLoad.get(key).filename, file_dd0);
        this.equal(tasker._willLoad.get(key).namespace, 'D0');
        key = file_dd0 + '@D1';
        this.equal(tasker._willLoad.get(key).filename, file_dd0);
        this.equal(tasker._willLoad.get(key).namespace, 'D1');

        tasker.loadLater('./dd1.js', 'D1');
        var file_dd1 = path.resolve('./tests/tasker/dd1.js');
        this.equal(Object.keys(tasker._tasks).length, 2);
        this.equal(Object.keys(tasker.toplevels).length, 1);
        this.equal(Object.keys(tasker._needed).length, 1);
        this.equal(Object.keys(tasker._loaded).length, 0);
        this.equal(tasker._willLoad.size, 3);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1dd1);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker._needed['task-1@D1'], task1dd1);
        key = file_dd0 + '@D0';
        this.equal(tasker._willLoad.get(key).filename, file_dd0);
        this.equal(tasker._willLoad.get(key).namespace, 'D0');
        key = file_dd0 + '@D1';
        this.equal(tasker._willLoad.get(key).filename, file_dd0);
        this.equal(tasker._willLoad.get(key).namespace, 'D1');
        key = file_dd1 + '@D1';
        this.equal(tasker._willLoad.get(key).filename, file_dd1);
        this.equal(tasker._willLoad.get(key).namespace, 'D1');

        tasker.lateLoad();
        var task1dd0 = tasker._tasks['task-1@D0'];
        var task2dd0 = tasker._tasks['task-2@D0'];
        var task2dd1 = tasker._tasks['task-2@D1'];
        this.equal(Object.keys(tasker._tasks).length, 5);
        this.equal(Object.keys(tasker.toplevels).length, 4);
        this.equal(Object.keys(tasker._needed).length, 0);
        this.equal(Object.keys(tasker._loaded).length, 3);
        this.equal(tasker._willLoad.size, 0);
        this.equal(tasker._lineno.filename, filename);
        this.isNull(tasker._namespace);
        this.equal(tasker.target, 'task-0');
        this.equal(tasker._tasks['task-0'], task0);
        this.equal(tasker._tasks['task-1@D1'], task1dd1);
        this.equal(tasker._tasks['task-2@D1'], task2dd1);
        this.equal(tasker._tasks['task-1@D0'], task1dd0);
        this.equal(tasker._tasks['task-2@D0'], task2dd0);
        this.equal(tasker.toplevels['task-0'], task0);
        this.equal(tasker.toplevels['task-1@D0'], task1dd0);
        this.equal(tasker.toplevels['task-1@D1'], task1dd1);
        this.equal(tasker.toplevels['task-2@D1'], task2dd1);
        this.equal(tasker._loaded[file_dd0+'@D0'].filename, file_dd0);
        this.equal(tasker._loaded[file_dd0+'@D0'].namespace, 'D0');
        this.equal(tasker._loaded[file_dd0+'@D1'].filename, file_dd0);
        this.equal(tasker._loaded[file_dd0+'@D1'].namespace, 'D1');
        this.equal(tasker._loaded[file_dd1+'@D1'].filename, file_dd1);
        this.equal(tasker._loaded[file_dd1+'@D1'].namespace, 'D1');
      }
    });
  });
});
